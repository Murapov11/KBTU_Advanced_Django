version: "3.8"

services:
  task-tracker-app:
    container_name: task-tracker-app
    depends_on:
      - task-tracker-db
      - kafka
      - zookeeper
    build:
      context: .
      dockerfile: Dockerfile
    restart: on-failure
    entrypoint:
      - /start.fastapi.sh
    ports:
      - "8000:8000"
    expose:
      - 8000
    env_file:
      - .env

  journal_writer:
    container_name: journal_writer
    depends_on:
      - task-tracker-db
      - kafka
      - zookeeper
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    entrypoint:
      - /start.journal.sh
    env_file:
      - .env

  task-tracker-db:
    container_name: task-tracker-db
    image: postgres:14
    restart: on-failure
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Dankb2131193*
      - POSTGRES_DB=final_django

  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    entrypoint: celery -A celery_worker worker --loglevel=INFO
    depends_on:
      - task-tracker-redis


  flower:
    container_name: flower
    build: .
    command: celery -A celery_worker flower --port=5555
    ports:
      - 5556:5555
    depends_on:
      - task-tracker-redis
      - celery_worker

  task-tracker-redis:
    image: redis
    ports:
      - "6379:6379"

  zookeeper:
    image: wurstmeister/zookeeper:latest
    restart: always
    container_name: zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:latest
    restart: always
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093, OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka-ui:
    image: "provectuslabs/kafka-ui:latest"
    restart: always
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9093

volumes:
      postgres_data:
